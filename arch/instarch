#!/bin/sh
set -e

echo -n "do you want to connect to internet via WIFI (y/N)? "; read answer
if [ "$answer" = y || "$answer" = yes ]; then
  iwctl device list
  echo -n "select a device: "; read device
  until iwctl station "$device" scan; do
    if [ "$device" = "cancel" ]; then
      break
    fi
    echo 'enter a valid device name, or type "cancel" to exit WIFI setup'
    iwctl device list
    echo -n "enter a device name: "; read device
  done

  iwctl station "$device" get-networks
  echo -n "select a network: "; read ssid
  until iwctl station "$device" connect "$ssid"; do
    if [ "$ssid" = "cancel" ]; then
      break
    fi
    echo 'enter a valid network name, or type "cancel" to exit WIFI setup'
    iwctl station "$device" get-networks
    echo -n "enter a network name: "; read ssid
  done
fi

timedatectl set-ntp true

if [ "" ]; then
  printf 'label: gpt\n,260MiB,U,*\n;' | sfdisk /dev/"$1"
  mkfs.fat -F32 /dev/"$1"1
  mkfs.btrfs /dev/"$1"2
  mount /dev/"$1"2 /mnt
  # create subvolumes for "/ etc home root opt usr/local srv tmp var":
  btrfs subvolume create /mnt/0
  btrfs subvolume create /mnt/etc
  btrfs subvolume create /mnt/home
  btrfs subvoulme create /mnt/root
  btrfs subvolume create /mnt/opt
  btrfs subvolume create /mnt/local
  btrfs subvolume create /mnt/srv
  btrfs subvolume create /mnt/tmp
  btrfs subvolume create /mnt/var
  umount -R /mnt
fi

# check to resume or continue

mount -o subvol=0 /dev/"$1"2 /mnt
mkdir /mnt/etc
mkdir /mnt/home
mkdir /mnt/root
mkdir /mnt/opt
mkdir -p /mnt/usr/local
mkdir /mnt/srv
mkdir /mnt/tmp
mkdir /mnt/var
mkdir /mnt/subvols
mkdir -p /mnt/boot/efi
mount -o subvol=etc /dev/"$1"2 /mnt/etc
mount -o subvol=home /dev/"$1"2 /mnt/home
mount -o subvol=root /dev/"$1"2 /mnt/root
mount -o subvol=opt /dev/"$1"2 /mnt/opt
mount -o subvol=local /dev/"$1"2 /mnt/usr/local
mount -o subvol=srv /dev/"$1"2 /mnt/srv
mount -o subvol=tmp /dev/"$1"2 /mnt/tmp
mount -o subvol=var /dev/"$1"2 /mnt/var
mount /dev/"$1"2 /mnt/subvols
mount /dev/"$1"1 /mnt/boot/efi

pacstrap /mnt base refind intel-ucode amd-ucode linux linux-firmware \
btrfs-progs e2fsprogs dosfstools udisks2 reflector networkmanager pipewire-pulse pipewire-alsa \
openssh curl ttf-hack noto-fonts materia-gtk-theme man-db unzip gst-plugins-{base,good,bad} gst-libav \
sway alacritty xorg-server-xwayland vim

genfstab -U /mnt >> /mnt/etc/fstab

# bootloader
# rEFInd
# in addition install non'UEFI syslinux
echo '' > /mnt/boot/refind.cfg
# automatically update rEFInd every time "refind" package is upgraded:
mkdir -p /mnt/etc/pacman.d/hooks
echo '[Trigger]
Type = Package
Operation = Upgrade
Target = refind
[Action]
Description = updating refind
When = PostTransaction
Exec = /usr/bin/refind-install
' > /mnt/etc/pacman.d/hooks/100-refind.hook

cp ./arch /mnt/usr/local/bin/
chmod u+s,+x /mnt/usr/local/bin/arch
mkdir -p /mnt/usr/local/lib/systemd/system
echo '[Unit]
Description=automatic update
After=network-online.target
[Service]
ExecStart=/usr/local/bin/arch autoupdate
Nice=19
KillMode=process
KillSignal=SIGINT
' > /mnt/usr/local/lib/systemd/system/autoupdate.service
echo '[Unit]
Description=automatic update timer
[Timer]
OnBootSec=5min
OnUnitInactiveSec=24h
RandomizedDelaySec=5min
[Install]
WantedBy=timers.target
' > /mnt/usr/local/lib/systemd/system/autoupdate.timer

cp ./codev /mnt/usr/local/bin/
chmod +x /mnt/usr/local/bin/codev
mkdir -p /mnt/usr/local/lib/systemd/system
echo '
[Unit]
Description=automatic backup
[Service]
ExecStart=/usr/local/bin/codev backup
Nice=19
KillMode=process
KillSignal=SIGINT' > /mnt/usr/local/lib/systemd/system/autobackup.service
echo '
[Unit]
Description=automatic backup timer
[Timer]
OnUnitInactiveSec=1h
RandomizedDelaySec=5min
[Install]
WantedBy=timers.target' > /mnt/usr/local/lib/systemd/system/autobackup.timer

mkdir -p /mnt/etc/fonts
echo '<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <selectfont>
    <rejectfont>
      <pattern><patelt name="family"><string>NotoNastaliqUrdu</string></patelt></pattern>
      <pattern><patelt name="family"><string>NotoKufiArabic</string></patelt></pattern>
      <pattern><patelt name="family"><string>NotoNaskhArabic</string></patelt></pattern>
      <pattern><patelt name="family"><string>NotoNaskhArabicUI</string></patelt></pattern>
    </rejectfont>
  </selectfont>
  <alias>
    <family>serif</family>
    <prefer><family>NotoSerif</family></prefer>
  </alias>
  <alias>
    <family>sans-serif</family>
    <prefer><family>NotoSans</family></prefer>
  </alias>
  <alias>
    <family>sans</family>
    <prefer><family>NotoSans</family></prefer>
  </alias>
  <alias>
    <family>monospace</family>
    <prefer><family>Hack</family></prefer>
  </alias>
</fontconfig>' > /mnt/etc/fonts/local.conf

# to customize dconf default values:
mkdir -p /mnt/etc/dconf/profile
echo 'user-db:user
system-db:local
' > /mnt/etc/dconf/profile/user

mkdir -p /mnt/etc/dconf/db/local.d
echo "
[org/gnome/desktop/interface]
gtk-theme='Materia-light-compact'
font-name='sans 10.5'
monospace-font-name='monospace 10.5'
document-font-name='sans 10.5'
overlay-scrolling=false
cursor-blink-timeout=1000
" > /mnt/etc/dconf/db/local.d/00-mykeyfile

arch-chroot /mnt /usr/bin/bash << 'EOF'
printf '\nen_US.UTF-8 UTF-8\n' >> /etc/locale.gen
locale-gen
printf 'LANG=en_US.UTF-8\n' > /etc/locale.conf

systemctl enable fstrim.timer
systemctl enable reflector.timer
systemctl enable systemd-timesyncd
systemctl enable NetworkManager
systemctl enable autoupdate.timer
systemctl enable autobackup.timer

dconf update
EOF

mkdir -p /mnt/etc/skel/.config/gtk-3.0
mkdir -p /mnt/etc/skel/.config/gtk-4.0
echo 'scrollbar {
  margin: 3px;
  border: 3px;
  border-radius: 3px;
  border-color: #ffffff;
  background-color: #bbbbbb;
}
scrollbar.top scrollbar.bottom scrollbar.left scrollbar.right {
  border-bottom: 3px;
  border-top: 3px;
  border-right: 3px;
  border-left: 3px;
}
scrollbar slider {
  margin: 0px;
  border: 0px;
  border-radius: 3px;
  background-color: #777777;
  min-width: 6px;
  min-height: 6px;
}' > /mnt/etc/skel/.config/gtk-3.0/gtk.css
cp /mnt/etc/skel/.config/gtk-3.0/gtk.css /mnt/etc/skel/.config/gtk-4.0/

echo '
PS1="\[$(tput setaf 1)\]\w >\[$(tput sgr0)\] "
unset HISTFILE
' >> /mnt/etc/skel/.bashrc

echo 'if [ -z $DISPLAY ] && [ "$(tty)" = "/dev/tty1" ]; then
  exec sway
fi' > /mnt/etc/skel/.profile

# first boot
mkdir -p /mnt/etc/systemd/system/getty@tty1.service.d
printf '[Service]\nExecStart=\nExecStart=-/usr/bin/agetty --autologin root --noclear %I $TERM' >
  /mnt/etc/systemd/system/getty@tty1.service.d/override.conf
echo '
while ! timedatectl set-timezone $( tzselect ); do
  echo "try again"
done

while ! passwd ; do
	echo "try again"
done

echo -n "choose a username: "; read username
useradd -m $username
while ! passwd user1; do
  echo "try again"
done

rm -r /etc/systemd/system/getty@tty1.service.d
rm /root/.profile
logout
' > /mnt/root/.profile

umount -R /mnt

echo 'installation completed successfully!'
echo 'enter "reboot", to reboot the system'
