= command based user interface
command based user interfaces (using keyboard, voice, gesture) are faster, more convenient and more powerful,
	than pointer based user interfaces (using mouse, touch, pen)
pointer based interface seems appealing at first sight, because of its discoverability
but with simple uniform GUI (ie the oposite of what we see in websites),
	there is no need for a pointer based user interface

touch interface has an additional problem: interaction at a distance is not possible
but it can still be useful in simple or special applications

detection of voice commands is a relatively simple process (compared to general speech recognition),
	because we only need to match against a relatively small set of commands
a headset with near range microphone can be used, to exclude far away sound sources
also it is better to put battery and transmitter of the headset in a separate unit which can be put in a pocket
	this makes the headset lighter and safer

for those who neither can use all their fingers, nor can talk, gesture based (2d) input can be implemented

".data/keyboard.png"
, comma followed by a letter -> the symbol on its bottom right corner
, ";" followed by "psi" followed by space or comma -> "Ïˆ" followed by one space or nothing
, two apostrophes then an alphabetical letter -> capital letter
, "aBcd" then two apostrophes followed by space -> "AbCD" followed by space
"https://github.com/abstracthat/dactyl-manuform"
"https://zealot.hu/absolem/"
"https://github.com/foostan/crkbd"
"https://github.com/nglgzz/42"
"https://github.com/adereth/dactyl-keyboard"
Kinesis Advantage 2 keyboard
"http://www.allthingsergo.com/the-best-ergonomic-mechanical-keyboards/"

for compatibility with other applications, we may still need a mouse,
	plus these extra keys which can be put in the middle of the keyboard:
, arrow keys, "page up", "page down", "home", "end", "tab"
, "alt", "ctrl", "shift", and an extra modifier key for inserting punctuations
also we can have a row of function keys, plus the "delete" key

= Comshell
Comshell is a unified computing environment, utilizing command based user interface

".data/comshell.png"

list of all projects will appear in a floating layer, at the center of screen, called overview layer
overview layer:
, left panel:
	, roots: user home plus attached devices
	, project groups: content of roots
, main view:
	projects: content of project groups

in a project view, the list of files of a project will be displayed in the left side'bar
opened files will be slightly highlighted
files and directories with names starting with a dot, will be hidden
".cache" directory inside a project is for files we don't want to share or backup

each opened file will have a side'bar at right showing its sections
there we can create new view corresponding to a section
sections with views will be slightly highlighted

text files will be opened in a text editor
directories containing media files, will be opened in a gallery view
files and directories inside a gallery, will be opened in a floating layer

non'local projects, web pages, PDF documents, etc, accessed from links inside the main project,
	will be opened in a floating layer
web pages: move caret between visual elements (ignoring structural elements)

modal key'bindings
modes (normal mode and insert mode) must be visually distinctive
press "esc" to go to normal mode
in normal mode we can:
, next/previous word, line, paragraph, section (righ/left middle row keys)
, next/previous file (ask for confirmation)
, next/previous section view, opened file
, go to the list of files to open a new view
, start and end selection, then copy or cut
, paste
, undo

, navigation: move, search
, selection
, completion

"enter" (in insert mode): selection, completion
"space" or empty line, then "enter": delete space (if any), then insert new line

codev: collaborative development without the need to keep the whole history
flaws of version control systems:
, they double the storage (working directory, local repository)
, their design makes it difficult to modify the history
	so in practice, the whole history must be kept indefinitely, even if not needed
codev init:
	initialize a remote host (for "hashbang.sh" hosts, if login fails, it will try to sign you up)
codev create:
	create a remote repository from the current project directory
codev clone
codev pull
and after merging: codev push

in projects list view:
, press "" key to open session management menu (poweroff, reboot, suspend, exit, lock)
, press "" key to open terminal view

for implementing a prototype of Comshell, it seems that the best tool at hand is PyGObject
Lua LGI is good too, and maybe better, if all we need is libraries based on GObject
but Python is more suitable, if we want a simple object'oriented glue for almost anything
"https://github.com/TomNicholas/Python-for-Scientists"
