with Debian we can easily setup a Linux based operating system
anything which needs a kernel'based operating system can use Debian:
, it supports a wide range of processor architectures
, it's suitable for systems with limited resources
, the stable releases provide a security proven system for servers

the following instructions show how to prepare a Debian installation media, in a Unix'like operating system
if you don't have a Unix'like operating system installed,
  you can use Debian's (or any other distro's) live image

first make sure that these packages are installed: wget libarchive-tools udisks2
for installation on BIOS systems, we also need: syslinux syslinux-common
download the files of this project:
; wget -r -np comshell-project-web-page-url
; cd */Comshell/os/
ensure that the files there aren't malicious
insert a USB storage device (at least 700MB), find the device using "lsblk"
now assuming the device is "sdx", and the CPU architecture is "amd64":
; sh mkdi.sh sdx amd64
for installation on a BIOS system:
; sh mkdi.sh sdx amd64 bios

now just boot to the USB storage device
it will ask for:
, a root password, and a user account (provide different passwords for user and root)
, confirmation for auto'detected time'zone
, the network configuration (if it's not a simple DHCP wired connection)
, the target device (if there is more than one device), and then installs Debian on it

".data/sway.png"

after login to the installed system you will see the main window displaying your projects
here you can also run shell commands

note that you can't login as root, root password provided during installation, is used only for "sudo"
it's not the traditional "sudo" though
when you run "sudo", it opens a Wayland window demanding a password,
  which is the root password provided during installation, and not the user's password
never type the user's password anywhere except at the login prompt
  (and make sure that it's not fake, by disconnecting and reconnecting your keyboard)
this means that if a malicious program steals your password (eg by faking the password entry window),
  it still can't run programs as root (cause only "sudo" can)
to see why, take a look at these:
"https://www.reddit.com/r/linuxquestions/comments/8mlil7/whats_the_point_of_the_sudo_password_prompt_if/"
"https://security.stackexchange.com/questions/119410/why-should-one-use-sudo"

to connect to a wireless LAN:
; sudo net wlan
to forget a previously configured wireless network:
; sudo net wlan forget

to pair with a Bluetooth device:
; sudo bt
to disconnect a Bluetooth device:
; sudo bt disconnect

to block/unblock a radio device (wlan wwan bluetooth nfc all):
; sudo rfkill block/unblock device-type

to install packages:
; sudo apm install package-names
to remove packages:
; sudo apm remove package-names
"apm" (atomic package manager) uses "apt" and BTRFS snapshots to manage packages in such a way that
  changes on the file'system would be atomic, and does not interfere with the running system
as a result when you add/remove/update packages using "apm",
  the system must be restarted for it to take effect
all of this means that we can have reliable automatic updates

you can set a user for automatic login:
; sudo autologin enable <user>
but to protect the computer from physical attacks, you have to disable automatic login ("sudo autologin disable"),
  and lock the session when you leave the computer
in addition you must:
, somehow prevent tampering with hardware
, protect boot firmware by a password
, disable changing the boot device
these can make physical attacks more difficult, but keep in mind that
  physical access to a computer is root access, given enough time and resources
