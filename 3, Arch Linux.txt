using Arch Linux we can easily setup and maintain a Linux system
to install Arch Linux on an x86 system, boot the Arch Linux live environment, then:
; curl https://damoonsaghian/Comshell/archive/master.tar.gz | tar -xz
; cd Comshell/ArchLinux
; chmod +x instarch
ensure that the files aren't malicious;

find the device you want to install Arch Linux on (use "lsblk" or "fdisk -l");
install Arch Linux on it (assuming the chosen device is "sdx"):
; instarch sdx
after rebooting to the installed system, it will ask for a timezone, root password, and a user account
after that, you can login as the user you provided

".data/sway.png"

to install packages: "arch add package-names"
to remove packages: "arch del package-names"
"arch" uses "pacman" and BTRFS snapshots to manage packages in such a way that
  changes on "/usr" and "/boot" would be atomic, and does not interfere with the running system
as a result when you install an application, or update the system using "arch",
  the system must be restarted for it to take effect
removing packages is done live though (otherwise managing "/etc" would be complicated)
all of this means that we can have reliable automatic updates

to connect to a WIFI network:
; nmcli dev wifi
; nmcli --ask dev wifi con <ssid>
to disconnect from a WIFI network:
; nmcli con down id <ssid>

you can set "user1" for automatic login (run as root):
; mkdir -p /mnt/etc/systemd/system/getty@tty1.service.d
; printf '[Service]\nExecStart=\nExecStart=-/usr/bin/agetty --autologin user1 --noclear %I $TERM' >
  /mnt/etc/systemd/system/getty@tty1.service.d/override.conf
but to protect the computer from physical attacks, you have to disable automatic login,
  and lock the session when you leave the computer
in addition you have to:
, somehow prevent tampering with hardware
, protect boot firmware by a password
, disable changing the boot device
these can make physical attacks more difficult, but keep in mind that
  physical access to a computer is root access, given enough time and resources
