computers must be portable devices with a USBC (USB4 without PCIe) port,
	which connects to a display and also provides power
ports on the display: USB dock, ethernet, audio jack, DP and HDMI (to connect to extra displays)
the display can have speaker, camera, light sensor and auto brightness
extra ports (on the computer) for compatibility with old devices:
	HDMI, audio jack, ethernet, USB

cpu, memory, peripherals, this seems to be the only practical architecture for the hardware of computers
cpu runs a sequence of simple computations, called instruction codes, one by one
compilers are special programs that generate instruction codes,
	from a program written in a structured and human readable language
"https://www.bottomupcs.com/"

there is always possibility of backdoors for closed source CPU,
	especially if the boot firmware is also closed source
recently introduction of "secure execution environment" makes this situation even worse
it's a closed source, full'blown, always'running mini operating system,
	with full access to the whole system (including memory and network)
furthermore they have made it practically impossible for users to disable it
this mess of a design cries out for hidden and quite sophisticated backdoors
"https://www.fsf.org/blogs/licensing/intel-me-and-why-we-should-get-rid-of-me"
"https://libreboot.org/faq.html#intel"
"https://en.wikipedia.org/wiki/Intel_Management_Engine"
"https://blog.invisiblethings.org/papers/2015/x86_harmful.pdf"

on X86 architectures the default boot firmware on nearly all systems are closed source
flashing a CoreBoot based boot firmware is possible, but there still will be closed source parts (Intel FSP)
in addition, there is no easy way to get rid of Intel ME (or AMD PSP),
	though there are some hacks to disable (but not completely remove) it:
	"https://puri.sm/posts/deep-dive-into-intel-me-disablement/"

ARM architecture is closed source too, but in most cases, boot firmwares are open source (U-Boot or EDK2)
ARM TrustZone can host an open source operating system too, apparently:
	"https://news.ycombinator.com/item?id=17783357"
GPU with open source driver: Qualcomm/Adreno

open source CPU: RISC-V, Power ISA

one read'only boot firmware, plus a writable one
, interrupted flashing does not brick the device
, no need for complex signing mechanism to make sure a device's firmware is not malicious
	you just have to make sure that the device boots from the read'only flash,
	and that the writable flash is empty, the first time you boot the device

= asynchronous digital circuits
in conventional digital circuits when the inputs change, the outputs can have temporary invalid values,
	until they stabilize to the valid values
but for the circuit to do its job, gates with memory (registers),
	must operate only when the inputs have correct values
one solution is to synchronize registers with a global clock signal
	the period of clock signal is made long enough for the circuit to become stable

disadvantages of synchronous circuits:
, we have to split long operations into several smaller ones,
	which can be performed in successive clock cycles (a technique known as pipelining)
	otherwise the circuit would be slow and inefficient
, distributing a high'fan'out, timing'sensitive clock signal can be complicated
, electromagnetic interference at the clock frequency and its harmonics
, widely distributed clock signal takes a lot of power, and must run whether the circuit is receiving inputs or not
although "clock gating" can help to reduce some of the problems of synchronous circuits,
	i think the real solution is to use asynchronous circuits

the only sane kind of asynchronous circuit which i could imagine is this:
, next to any data wire, there is a control wire which determines if the data is valid or not
, when a register wants to change its outputs, it first invalidates them,
	for a duration equal to the delay of one gate
, any gate receiving an invalid input, invalidates its outputs
, this way all data which is going to change in the future, is first invalidated
, registers operate only when all inputs are valid
