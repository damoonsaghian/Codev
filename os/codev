#!/bin/sh -e

init() {
  remote_host=$1
  user=$2

  printf "\nHost $remote_host\n  User $user\n" >> ~/.ssh/config

  { echo "$user" | grep -E "^[a-z][a-z0-9]{0,30}$" >/dev/null; } || {
  	echo "\"$user\" is not a valid username"
    echo "a valid username must:"
    echo ", be between between 1 and 31 characters long"
    echo ", consist of only 0-9 and a-z (lowercase only)"
    echo ", begin with a letter"
  	exit 1
  }

  ssh "$user"@"$remote_host" && return

  # if there is no SSH keys, create a key pair
  ssh-keygen

  # create a user in one of "hashbang.sh" servers
  # https://github.com/hashbang/hashbang.sh/blob/master/src/hashbang.sh

  # gnupg ssh
  # https://wiki.archlinux.org/title/GnuPG#SSH_agent
  # https://incenp.org/notes/2015/gnupg-for-ssh-authentication.html
  # https://opensource.com/article/19/4/gpg-subkeys-ssh
  # https://gist.github.com/mcattarinussi/834fc4b641ff4572018d0c665e5a94d3
  #
  # https://moser-isi.ethz.ch/gpg.html
  # https://www.gnupg.org/documentation/manuals/gnupg/

	echo
  echo " please choose a server to create your account on"
  echo
  hbar
  printf -- '  %-1s | %-4s | %-36s | %-8s | %-8s\n' \
  	"#" "Host" "Location" "Users" "Latency"
  hbar
	wget --quiet -O- --header 'Accept:text/plain' https://hashbang.sh/server/stats |
	while IFS="|" read -r host _ location current_users max_users _; do
	  host=$(echo "$host" | cut -d. -f1)
	  latency=$(ping -c 1 "${host}.hashbang.sh" | grep -oP ".*time=\K\d+ ms")
	  n=$((n+1))
	  printf -- '  %-1s | %-4s | %-36s | %8s | %-8s\n' \
	  	"$n" \
	  	"$host" \
	  	"$location" \
	  	"$current_users/$max_users" \
	  	"$latency"
  done
	hbar

	echo
  while true; do
  	printf ' Enter Number 1-%i : ' "$n"
  	read -r choice
  	number=$(echo "$choice" | awk '/[^0-9]/ { print "no" }')
  	if [ "$number" != "no" ] && [ "$choice" -ge 1 ] && [ "$choice" -le $n ]; then
  		break;
  	fi
  done
  host=$(head -n "$choice" "$host_data" | tail -n1 | cut -d \| -f1)

  pulic_key=$(cat ~/.ssh/id_rsa.pub)
  host=de1.hashbang.sh
  wget --post-data="{\"user\":\"$user\",\"key\":\"$public_key\",\"host\":\"$host\"}" \
    --header='Content-Type: application/json' https://hashbang.sh/user/create
}

update_key() {
}

create () {
  remote_host=
}

delete() {
  # remove project
  # remove the project's website from "~/Public/index.html"
}

push() {
  git push
  # ".cache" directory will not be synced to remote
}

pull() {
  git lfs pull
}

backup() {
  # if $1 is init, ask the user to select disks to store backups

  # a disk with the file ".codev-backup/.uuid" matching "~/.config/codev/backup-uuid"
  # "~/.config/codev/backup" keeps backup paths for projects

  # do not follow mount points when making backups

  # backup will include ".cache" directory
}

# add or remove a user that can push
# ; codev add username
# ; codev remove username
add_user() {
  username=$1
}
remove_user() {
  username=$1
}

case "$1" in
  init) shift; init "$@" ;;
  create) shift; create "$@" ;;
  delete) shift; delete "$@" ;;
  push) shift; push "$@" ;;
  pull) shift; pull "$@" ;;
  backup) shift; backup "$@" ;;
  add) shift; add_user "$@" ;;
  remove) shift; remove_user "$@" ;;
esac
