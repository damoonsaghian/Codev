#_preseed_V1

# to preseed variables used in the installed system,
#   the name of the package that contains the corresponding debconf template should be used
# only variables that have their owner set to something other than “d-i”,
#   will be propagated to the debconf database for the installed system

d-i debian-installer/locale string en_US
d-i keyboard-configuration/xkb-keymap select us

# use NTP to set the clock during the install
d-i clock-setup/ntp boolean true
# set the hardware clock to UTC
d-i clock-setup/utc boolean true

# guess time'zone but let the user to confirm it
# this command is run as early as possible, just after preseeding is read
d-i preseed/early_command string \
  . /usr/share/debconf/confmodule; \
  db_set time/zone "$(wget -q -O- http://ip-api.com/line/?fields=timezone)"; \
  db_fset time/zone seen false

# any hostname and domain names assigned from dhcp take precedence over values set here
# however, setting the values still prevents the questions from being shown, even if values come from dhcp
d-i netcfg/get_hostname string unassigned-hostname
d-i netcfg/get_domain string unassigned-domain
# disable that annoying WEP key dialog
d-i netcfg/wireless_wep string

# if non'free firmware is needed, try to load it, without prompting
d-i hw-detect/load_firmware boolean true

d-i mirror/country string manual
d-i mirror/http/hostname string deb.debian.org
d-i mirror/http/directory string /debian
d-i mirror/http/proxy string
d-i mirror/suite string sid

# don't ask for user's full name
d-i passwd/user-fullname string

d-i preseed/early_command string \
  recipe="default :: \
    538 538 1075 free	$iflabel{ gpt }	method{ efi }	format{ } . \
    900 10000 -1 btrfs method{ format } format{ } use_filesystem{ } filesystem{ btrfs } mountpoint{ / } . \
    100% 512 200% linux-swap method{ swap } format{ } ."; \
  arch="$(dpkg --print-architecture)"; \
  [ $arch = amd64 ] || [ $arch = i386 ] && [ ! -d /sys/firmware/efi ] && recipe="bios :: \
    1 1 1 free $iflabel{ gpt }	method{ biosgrub } . \
    1500 10000 -1 btrfs	method{ format } format{ } use_filesystem{ } filesystem{ btrfs } mountpoint{ / } . \
    100% 512 200% linux-swap method{ swap } format{ } ."; \
  [ "$arch" = ppc64el ] && recipe="ppc :: \
    8 1 1 prep $primary{ } $bootable{ } method{ prep } . \
    1500 10000 -1 btrfs $primary{ } method{ format } format{ } use_filesystem{ } filesystem{ btrfs } \
      mountpoint{ / } . \
    100% 512 300% linux-swap method{ swap } format{ } ."; \
  debconf-set partman-auto/expert_recipe "$recipe"

# despite using BTRFS, in-place writing is needed in two situations:
# , in-place first write for preallocated space, like in torrents
#   we don't want to disable COW for these files
#   apparently supported by BTRFS, isn't it?
#   https://lore.kernel.org/linux-btrfs/20210213001649.GI32440@hungrycats.org/
#   https://www.reddit.com/r/btrfs/comments/timsw2/clarification_needed_is_preallocationcow_actually/
#   https://www.reddit.com/r/btrfs/comments/s8vidr/how_does_preallocation_work_with_btrfs/hwrsdbk/?context=3
# , virtual machines and databases (eg the one used in Webkit)
#   COW must be disabled for these files
#   generally it's done automatically by the program itself (eg systemd-journald)
#   otherwise we must do it manually: chattr +C ...
#   apparently Webkit uses SQLite in WAL mode

# this makes partman automatically partition without confirmation
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
d-i partman/choose_partition select finish

d-i apt-setup/non-free boolean true
d-i apt-setup/contrib boolean true

tasksel tasksel/first multiselect
d-i pkgsel/run_tasksel boolean false
# some standard packages
d-i pkgsel/include string ca-certificates libnss-systemd systemd-timesyncd file bash-completion
popularity-contest popularity-contest/participate boolean false

d-i grub-installer/skip true

# this command is run just before the install finishes, but when there is still a usable /target directory
# you can use the in-target command to easily run commands in the target system
d-i preseed/late_command string \
  cd /target; \
  mv ./bin ./boot ./lib ./lib64 ./sbin ./usr ./1; \
  ln --symbolic -T /1 ./0; \
  ln --symbolic /0/bin .; \
  ln --symbolic /0/boot .; \
  ln --symbolic /0/lib .; \
  ln --symbolic /0/lib64 .; \
  ln --symbolic /0/sbin .; \
  ln --symbolic /0/usr .; \
  \
  mount --bind /hd-media /target/mnt; \
  in-target sh /mnt/comshell/os/di-late.sh
# directories which must change atomically during an upgrade: /bin /boot /lib /lib64 /sbin /usr
# since we could not remove them while in chroot, we did it here
